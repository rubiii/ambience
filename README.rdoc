= Ambience

App configuration feat. YAML and JVM properties. Lets you specify a default configuration in a YAML file and overwrite details via JVM properties for production.

== Installation

  $ gem install ambience

== How it works

Given you created a YAML config like this one:

  auth:
    address: http://example.com
    username: ferris
    password: test

You create an Ambience config by passing in the path to your config file:

  AppConfig = Ambience.new File.join(Rails.root, "config", "ambience.yml")

Ambience will load and convert your config into a Hash:

  { "auth" => { "address" => "http://example.com", "username" => "ferris", "password" => "test" } }

Then it looks for any JVM properties (if your running JRuby)

  auth.address = "http://live.example.com"
  auth.password = "topsecret"

and deep merge them with your Hash:

  { "auth" => { "address" => "http://live.example.com", "username" => "ferris", "password" => "topsecret" } }

Finally, it returns the Hash as a {Hashie::Mash}[http://github.com/intridea/hashie] so you can access values by specifying keys as Symbols or Strings or using method-like accessors:

  AppConfig[:auth][:address]
  # => "http://live.example.com"

  AppConfig["auth"]["username"]
  # => "http://live.example.com"

  AppConfig.auth.password
  # => "topsecret"

