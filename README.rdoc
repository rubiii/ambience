= Ambience

App configuration feat. YAML and JVM properties. Lets you specify a default configuration in a YAML file and overwrite details via local settings and JVM properties for production.

== Installation

  $ gem install ambience

== How it works

Given you created a YAML config like this:

  auth:
    address: http://example.com
    username: ferris
    password: test

You can instantiate an Ambience config by passing in the path to your config file:

  AppConfig = Ambience.new File.join(Rails.root, "config", "ambience.yml")

Ambience will load and convert your config into a Hash:

  { "auth" => { "address" => "http://example.com", "username" => "ferris", "password" => "test" } }

Afterwards it tries to merge these settings with local ones specified in an Ambience.local_config file. Finally it looks for any JVM properties (if your running JRuby) and merge these properties with your config:

  auth.address = "http://live.example.com"
  auth.password = "topsecret"

The result would be something like this:

  { "auth" => { "address" => "http://live.example.com", "username" => "ferris", "password" => "topsecret" } }

In the end you can decide whether you want to return the config as a Hash:

  AppConfig = Ambience.new(File.join(Rails.root, "config", "ambience.yml")).to_hash

or a {Hashie::Mash}[http://github.com/intridea/hashie]:

  AppConfig = Ambience.new(File.join(Rails.root, "config", "ambience.yml")).to_mash
